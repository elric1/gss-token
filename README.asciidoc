GSS-TOKEN
=========

gss-token is simple program that generates and consumes BASE64 encoded
GSS tokens.  It comes in handy when testing as you can cut and paste
the tokens between terminal windows to test the Kerberos rather than
having to have a client/server (like knc(1)) program to do it.  It's
especially helpful when you have firewalls to configure to let extra
ports through.

BUILDING
--------

To build:

......................................................................
	$ autoreconf -f -i
	$ ./configure
	$ make
......................................................................

INTERESTING USE CASES
---------------------

Using a command line curl that doesn't support Negotiate (GSS) Auth
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

HTTP SPNEGO authentication just uses base64 tokens exactly like
those generated by gss-token(1).  You add a header that looks like
this:

......................................................................
	Authorization: Negotiate YIICgQYGKwYBBQUCoIICdTCCAnGgDTALBgkqhkiG...PLM
......................................................................

gss-token(1) will prepend "Negotiate " to its output if you supply
a -N flag, and so:

......................................................................
	$ curl -H "Authorization: $(gss-token -N HTTP@server)" \
	> https://server/path/to/file
......................................................................

will opportunistically send a GSSAPI authentication with your HTTP
request.

Poor logging on a Kerberos server
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let's say that you are GSS to authenticate to an HTTP server and it
is failing.  Many servers do not return useful error messages to clients
and they often do not log much of interest either.  In this situation,
gss-token can come to the rescue.  Just:

......................................................................
	$ curl -v --negotiate -u: http://my.server.name
	*   Trying 10.137.0.16:81...
	* Connected to my.server.name (10.137.0.16) port 80 (#0)
	* Server auth using Negotiate with user ''
	> GET / HTTP/1.1
	> Host: my.server.name
	> Authorization: Negotiate YIICgQYGKwYBBQUCoIICdTCCAnGgDTALBgkqhkiG...PLM
	> User-Agent: curl/7.88.1
	> Accept: */*
	>
......................................................................

Note the `Authorization` that is returned.  On the web server host, as the
web server's user, with `KRB5_KTNAME` set the same as the web server, run:

......................................................................
	$ gss-token -r
......................................................................

and past the contents of the `Authorization` header and you will get
the error message that the web server should have logged.

Some web servers may log the `Authorization` header.  In this case, you
can still use gss-token(1) to examine what's wrong.  If the log message
is older than clock-skew, just setup `/tmp/my-krb5.conf` and increase
clock-skew for the purposes of your test.
